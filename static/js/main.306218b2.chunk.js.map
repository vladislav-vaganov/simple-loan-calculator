{"version":3,"sources":["LoanCalculator.jsx","utils.js","constants.js","index.js"],"names":["annualPeriodOptions","from","to","options","i","push","name","value","getAnnualPeriodOptions","LoanCalculator","props","getOnInputChange","propertyName","e","target","valueAsNumber","validity","setState","valid","NaN","onPeriodChange","periodInMonths","state","loanAmountInput","loanAmount","downPaymentInput","downPayment","interestRate","onLoanAmountChange","onDownPaymentChange","this","monthlyPayment","interest","Math","pow","calculateMonthlyPayment","className","htmlFor","type","min","step","onChange","required","max","readOnly","disabled","map","key","isNaN","round","PureComponent","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAKMA,G,MCHgC,SAACC,EAAMC,GAG3C,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,IAC1BD,EAAQE,KAAK,CAAEC,KAAMF,EAAGG,MCFE,GDEKH,IAGjC,OAAOD,EDJmBK,CAAuB,EAAG,IAEzCC,EAAb,kDACE,WAAYC,GAAQ,IAAD,uBACjB,cAAMA,IAkBRC,iBAAmB,SAACC,GAAD,OAAkB,SAACC,GAAO,IAAD,IACCA,EAAEC,OAArCP,EADkC,EAClCA,MAAOQ,EAD2B,EAC3BA,cAAeC,EADY,EACZA,SAE9B,EAAKC,UAAL,mBACGL,EAAeI,EAASE,MAAQH,EAAgBI,KADnD,wBAEMP,EAFN,SAE4BL,GAF5B,MAtBiB,EA4BnBa,eAAiB,SAACP,GAAO,IACfN,EAAUM,EAAEC,OAAZP,MACR,EAAKU,SAAS,CAAEI,eAAgBd,KA9Bf,IAIFc,EAJE,YAGWrB,EAHX,MAITO,MAJS,OAMjB,EAAKe,MAAQ,CACXC,gBAAiB,IACjBC,WAAY,EACZC,iBAAkB,IAClBC,YAAa,EACbC,aEjBuB,IFkBvBN,kBAGF,EAAKO,mBAAqB,EAAKjB,iBAAiB,cAChD,EAAKkB,oBAAsB,EAAKlB,iBAAiB,eAhBhC,EADrB,qDAkCY,IAAD,EAQHmB,KAAKR,MANPE,EAFK,EAELA,WACAD,EAHK,EAGLA,gBACAG,EAJK,EAILA,YACAD,EALK,EAKLA,iBACAE,EANK,EAMLA,aACAN,EAPK,EAOLA,eAEIU,ECtC6B,SAACP,EAAYE,EAAaC,EAAcN,GAC7E,IAAMW,EAAWL,EAAe,IAGhC,OAFeH,GAAc,EAAIE,EAAc,KAE9BM,GAAa,EAAIC,KAAKC,IAAI,GAAK,EAAIF,GAAWX,IDkCtCc,CACrBX,EACAE,EACAC,EACAN,GAGF,OACE,yBAAKe,UAAU,mBACb,+CAEA,yBAAKA,UAAU,0BACb,2BAAOC,QAAQ,cAAf,iBACA,2BACE/B,KAAK,aACLgC,KAAK,SACLC,IAAK,EACLC,KAAK,MACLjC,MAAOgB,EACPkB,SAAUX,KAAKF,mBACfc,UAAQ,IAEV,kCExEc,MF2EhB,yBAAKN,UAAU,0BACb,2BAAOC,QAAQ,eAAf,kBACA,2BACE/B,KAAK,cACLgC,KAAK,SACLC,IAAK,EACLI,IAAK,IACLH,KAAK,MACLjC,MAAOkB,EACPgB,SAAUX,KAAKD,oBACfa,UAAQ,IAEV,qCAGF,yBAAKN,UAAU,0BACb,2BAAOC,QAAQ,YAAf,mBACA,2BAAO/B,KAAK,WAAWgC,KAAK,SAAS/B,MAAOoB,EAAciB,UAAQ,EAACC,UAAQ,IAC3E,qCAGF,yBAAKT,UAAU,0BACb,2BAAOC,QAAQ,UAAf,YACA,4BAAQ/B,KAAK,SAASC,MAAOc,EAAgBoB,SAAUX,KAAKV,gBACzDpB,EAAoB8C,KAAI,gBAAGxC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAT,OACvB,4BAAQwC,IAAKxC,EAAOA,MAAOA,GACxBD,OAIP,yCAGF,yBAAK8B,UAAU,2BACb,mDACA,qCAAOY,MAAMjB,GAAkB,MAAQE,KAAKgB,MAAMlB,GAAlD,YE9Gc,YFOxB,GAAoCmB,iBGFpCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.306218b2.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport './LoanCalculator.css';\nimport { CURRENCY, INTEREST_RATE } from './constants';\nimport { getAnnualPeriodOptions, calculateMonthlyPayment } from './utils';\n\nconst annualPeriodOptions = getAnnualPeriodOptions(1, 6);\n\nexport class LoanCalculator extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    const [firstPeriodOption] = annualPeriodOptions;\n    const { value: periodInMonths } = firstPeriodOption;\n\n    this.state = {\n      loanAmountInput: '0',\n      loanAmount: 0,\n      downPaymentInput: '0',\n      downPayment: 0,\n      interestRate: INTEREST_RATE,\n      periodInMonths,\n    };\n\n    this.onLoanAmountChange = this.getOnInputChange('loanAmount');\n    this.onDownPaymentChange = this.getOnInputChange('downPayment');\n  }\n\n  getOnInputChange = (propertyName) => (e) => {\n    const { value, valueAsNumber, validity } = e.target;\n\n    this.setState({\n      [propertyName]: validity.valid ? valueAsNumber : NaN,\n      [`${propertyName}Input`]: value,\n    });\n  };\n\n  onPeriodChange = (e) => {\n    const { value } = e.target;\n    this.setState({ periodInMonths: value });\n  };\n\n  render() {\n    const {\n      loanAmount,\n      loanAmountInput,\n      downPayment,\n      downPaymentInput,\n      interestRate,\n      periodInMonths,\n    } = this.state;\n    const monthlyPayment = calculateMonthlyPayment(\n      loanAmount,\n      downPayment,\n      interestRate,\n      periodInMonths\n    );\n\n    return (\n      <div className=\"loan-calculator\">\n        <h1>Loan Calculator</h1>\n\n        <div className=\"loan-calculator__field\">\n          <label htmlFor=\"loanAmount\">Loan Amount: </label>\n          <input\n            name=\"loanAmount\"\n            type=\"number\"\n            min={0}\n            step=\"any\"\n            value={loanAmountInput}\n            onChange={this.onLoanAmountChange}\n            required\n          />\n          <span> {CURRENCY}</span>\n        </div>\n\n        <div className=\"loan-calculator__field\">\n          <label htmlFor=\"downPayment\">Down Payment: </label>\n          <input\n            name=\"downPayment\"\n            type=\"number\"\n            min={0}\n            max={100}\n            step=\"any\"\n            value={downPaymentInput}\n            onChange={this.onDownPaymentChange}\n            required\n          />\n          <span> %</span>\n        </div>\n\n        <div className=\"loan-calculator__field\">\n          <label htmlFor=\"interest\">Interest Rate: </label>\n          <input name=\"interest\" type=\"number\" value={interestRate} readOnly disabled />\n          <span> %</span>\n        </div>\n\n        <div className=\"loan-calculator__field\">\n          <label htmlFor=\"period\">Period: </label>\n          <select name=\"period\" value={periodInMonths} onChange={this.onPeriodChange}>\n            {annualPeriodOptions.map(({ name, value }) => (\n              <option key={value} value={value}>\n                {name}\n              </option>\n            ))}\n          </select>\n          <span> years</span>\n        </div>\n\n        <div className=\"loan-calculator__result\">\n          <span>Monthly Payment: </span>\n          <b>{`${isNaN(monthlyPayment) ? '---' : Math.round(monthlyPayment)} ${CURRENCY}`}</b>\n        </div>\n      </div>\n    );\n  }\n}\n","import { MONTHS_IN_YEAR } from './constants';\r\n\r\nexport const getAnnualPeriodOptions = (from, to) => {\r\n  const options = [];\r\n\r\n  for (let i = from; i <= to; i++) {\r\n    options.push({ name: i, value: i * MONTHS_IN_YEAR });\r\n  }\r\n\r\n  return options;\r\n};\r\n\r\nexport const calculateMonthlyPayment = (loanAmount, downPayment, interestRate, periodInMonths) => {\r\n  const interest = interestRate / 100;\r\n  const amount = loanAmount * (1 - downPayment / 100);\r\n\r\n  return (amount * interest) / (1 - Math.pow(1 / (1 + interest), periodInMonths));\r\n};\r\n","export const CURRENCY = '$';\r\n\r\nexport const INTEREST_RATE = 1.5;\r\n\r\nexport const MONTHS_IN_YEAR = 12;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { LoanCalculator } from './LoanCalculator';\n\nReactDOM.render(\n  <React.StrictMode>\n    <LoanCalculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}